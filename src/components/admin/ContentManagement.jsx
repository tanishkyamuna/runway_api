import React, { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { Plus, Edit, Trash2, Image as ImageIcon, Video, Star } from 'lucide-react';
import toast from 'react-hot-toast';

const ContentManagement = () => {
  const [activeTab, setActiveTab] = useState('features');
  const [content, setContent] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editingItem, setEditingItem] = useState(null);

  const tabs = [
    { id: 'features', name: 'Features' },
    { id: 'templates', name: 'Templates' },
    { id: 'examples', name: 'Examples' },
    { id: 'testimonials', name: 'Testimonials' }
  ];

  useEffect(() => {
    fetchContent();
  }, [activeTab]);

  const fetchContent = async () => {
    try {
      setLoading(true);
      setError(null);
      
      let query = supabase
        .from(activeTab)
        .select('*')
        .order('created_at', { ascending: false });

      const { data, error } = await query;

      if (error) throw error;
      setContent(data || []);
    } catch (err) {
      console.error('Error fetching content:', err);
      setError(err.message);
      toast.error('Failed to load content');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (item) => {
    setEditingItem(item);
  };

  const handleSave = async (item) => {
    try {
      const { error } = await supabase
        .from(activeTab)
        .upsert({
          ...item,
          updated_at: new Date().toISOString()
        });

      if (error) throw error;

      toast.success('Changes saved successfully');
      setEditingItem(null);
      fetchContent();
    } catch (err) {
      console.error('Error saving:', err);
      toast.error('Failed to save changes');
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this item?')) return;

    try {
      const { error } = await supabase
        .from(activeTab)
        .delete()
        .eq('id', id);

      if (error) throw error;
      
      toast.success('Item deleted successfully');
      fetchContent();
    } catch (err) {
      console.error('Error deleting item:', err);
      toast.error('Failed to delete item');
    }
  };

  const handleAdd = () => {
    const newItem = {
      id: null, // Will be generated by Supabase
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    // Add table-specific default fields
    switch (activeTab) {
      case 'features':
        newItem.icon = '';
        newItem.title = '';
        newItem.description = '';
        newItem.display_order = content.length + 1;
        break;
      case 'templates':
        newItem.title = '';
        newItem.description = '';
        newItem.image_url = '';
        newItem.video_preview_url = '';
        newItem.category = 'exterior';
        newItem.orientation = 'landscape';
        newItem.duration = 10;
        break;
      case 'examples':
        newItem.title = '';
        newItem.description = '';
        newItem.category = '';
        newItem.property_type = '';
        newItem.original_image_url = '';
        newItem.video_preview_url = '';
        newItem.duration = '10 seconds';
        newItem.template_name = '';
        break;
      case 'testimonials':
        newItem.name = '';
        newItem.role = '';
        newItem.company = '';
        newItem.content = '';
        newItem.rating = 5;
        break;
      default:
        break;
    }

    setEditingItem(newItem);
  };

  const renderEditForm = () => {
    if (!editingItem) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <div className="p-6 border-b">
            <h2 className="text-xl font-bold">
              {editingItem.id ? 'Edit' : 'Add New'} Item
            </h2>
          </div>

          <div className="p-6 space-y-4">
            {activeTab === 'features' && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Icon</label>
                  <input
                    type="text"
                    value={editingItem.icon || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, icon: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                    placeholder="e.g., wand2, clock, palette"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                  <input
                    type="text"
                    value={editingItem.title || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, title: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                  <textarea
                    value={editingItem.description || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, description: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                    rows={3}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Display Order</label>
                  <input
                    type="number"
                    value={editingItem.display_order || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, display_order: parseInt(e.target.value) })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
              </>
            )}

            {activeTab === 'templates' && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                  <input
                    type="text"
                    value={editingItem.title || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, title: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                  <textarea
                    value={editingItem.description || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, description: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                    rows={3}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                  <select
                    value={editingItem.category || 'exterior'}
                    onChange={(e) => setEditingItem({ ...editingItem, category: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  >
                    <option value="exterior">Exterior</option>
                    <option value="interior">Interior</option>
                    <option value="commercial">Commercial</option>
                    <option value="luxury">Luxury</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Orientation</label>
                  <select
                    value={editingItem.orientation || 'landscape'}
                    onChange={(e) => setEditingItem({ ...editingItem, orientation: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  >
                    <option value="landscape">Landscape (16:9)</option>
                    <option value="portrait">Portrait (9:16)</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Duration (seconds)</label>
                  <input
                    type="number"
                    value={editingItem.duration || 10}
                    onChange={(e) => setEditingItem({ ...editingItem, duration: parseInt(e.target.value) })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                    min={5}
                    max={60}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Image URL</label>
                  <input
                    type="url"
                    value={editingItem.image_url || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, image_url: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Video Preview URL</label>
                  <input
                    type="url"
                    value={editingItem.video_preview_url || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, video_preview_url: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Generation Prompt</label>
                  <textarea
                    value={editingItem.prompt || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, prompt: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                    rows={4}
                  />
                </div>
              </>
            )}

            {activeTab === 'examples' && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                  <input
                    type="text"
                    value={editingItem.title || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, title: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                  <textarea
                    value={editingItem.description || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, description: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                    rows={3}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                  <select
                    value={editingItem.category || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, category: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  >
                    <option value="">Select Category</option>
                    <option value="exterior">Exterior</option>
                    <option value="interior">Interior</option>
                    <option value="aerial">Aerial</option>
                    <option value="virtual">Virtual Tour</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Property Type</label>
                  <select
                    value={editingItem.property_type || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, property_type: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  >
                    <option value="">Select Property Type</option>
                    <option value="residential">Residential</option>
                    <option value="commercial">Commercial</option>
                    <option value="luxury">Luxury</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Original Image URL</label>
                  <input
                    type="url"
                    value={editingItem.original_image_url || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, original_image_url: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Video Preview URL</label>
                  <input
                    type="url"
                    value={editingItem.video_preview_url || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, video_preview_url: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Duration</label>
                  <input
                    type="text"
                    value={editingItem.duration || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, duration: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                    placeholder="e.g., 10 seconds"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Template Name</label>
                  <input
                    type="text"
                    value={editingItem.template_name || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, template_name: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
              </>
            )}

            {activeTab === 'testimonials' && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                  <input
                    type="text"
                    value={editingItem.name || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, name: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                  <input
                    type="text"
                    value={editingItem.role || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, role: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Company</label>
                  <input
                    type="text"
                    value={editingItem.company || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, company: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Content</label>
                  <textarea
                    value={editingItem.content || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, content: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                    rows={4}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Rating</label>
                  <input
                    type="number"
                    value={editingItem.rating || 5}
                    onChange={(e) => setEditingItem({ ...editingItem, rating: parseInt(e.target.value) })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                    min={1}
                    max={5}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Image URL</label>
                  <input
                    type="url"
                    value={editingItem.image_url || ''}
                    onChange={(e) => setEditingItem({ ...editingItem, image_url: e.target.value })}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                  />
                </div>
              </>
            )}
          </div>

          <div className="p-6 border-t bg-gray-50 flex justify-end gap-4">
            <button
              onClick={() => setEditingItem(null)}
              className="px-4 py-2 text-gray-600 hover:text-gray-800"
            >
              Cancel
            </button>
            <button
              onClick={() => handleSave(editingItem)}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Save Changes
            </button>
          </div>
        </div>
      </div>
    );
  };

  const renderContent = () => {
    if (loading) {
      return (
        <div className="text-center py-8">Loading...</div>
      );
    }

    if (error) {
      return (
        <div className="text-red-500 py-8">{error}</div>
      );
    }

    if (content.length === 0) {
      return (
        <div className="text-center text-gray-500 py-8">
          No content found. Click "Add New" to create your first item.
        </div>
      );
    }

    return (
      <div className="grid gap-6">
        {content.map(item => (
          <div key={item.id} className="bg-white p-6 rounded-lg shadow">
            <div className="flex justify-between items-start">
              <div className="flex-1">
                <h3 className="text-xl font-bold mb-2">
                  {item.title || item.name}
                </h3>
                <p className="text-gray-600">
                  {item.description || item.content || item.subtitle}
                </p>
                
                {activeTab === 'templates' && (
                  <div className="mt-4 space-y-4">
                    <div className="flex items-center gap-4">
                      <span className="text-gray-500">Category:</span>
                      <span className="px-2 py-1 bg-blue-100 text-blue-600 rounded-full text-sm">
                        {item.category}
                      </span>
                      <span className="text-gray-500">Orientation:</span>
                      <span className="px-2 py-1 bg-blue-100 text-blue-600 rounded-full text-sm">
                        {item.orientation}
                      </span>
                      <span className="text-gray-500">Duration:</span>
                      <span className="px-2 py-1 bg-blue-100 text-blue-600 rounded-full text-sm">
                        {item.duration}s
                      </span>
                    </div>
                    {item.prompt && (
                      <div>
                        <span className="text-gray-500">Prompt:</span>
                        <p className="mt-1 text-gray-600">{item.prompt}</p>
                      </div>
                    )}
                    {item.image_url && (
                      <div>
                        <span className="text-gray-500">Preview Image:</span>
                        <div className="mt-2 relative aspect-video w-full max-w-md">
                          <img 
                            src={item.image_url}
                            alt="Template Preview"
                            className="w-full h-full object-cover rounded-lg"
                          />
                        </div>
                      </div>
                    )}
                    {item.video_preview_url && (
                      <div>
                        <span className="text-gray-500">Preview Video:</span>
                        <div className="mt-2 relative aspect-video w-full max-w-md">
                          <video 
                            src={item.video_preview_url}
                            className="w-full h-full rounded-lg"
                            controls
                            preload="metadata"
                          >
                            Your browser does not support the video tag.
                          </video>
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {activeTab === 'testimonials' && (
                  <div className="mt-4">
                    <div className="flex items-center gap-2 mb-2">
                      {Array(item.rating || 5).fill(null).map((_, i) => (
                        <Star key={i} className="w-5 h-5 text-yellow-400 fill-current" />
                      ))}
                    </div>
                    <div className="text-sm text-gray-500">
                      {item.role} at {item.company}
                    </div>
                  </div>
                )}
              </div>
              
              <div className="flex gap-2">
                <button
                  onClick={() => handleEdit(item)}
                  className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg"
                  title="Edit"
                >
                  <Edit className="w-5 h-5" />
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="p-2 text-red-600 hover:bg-red-50 rounded-lg"
                  title="Delete"
                >
                  <Trash2 className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    );
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Content Management</h1>
        <button
          onClick={handleAdd}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
        >
          <Plus className="w-5 h-5" />
          Add New
        </button>
      </div>

      <div className="flex gap-2 mb-6">
        {tabs.map(tab => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            className={`px-4 py-2 rounded-lg transition-colors ${
              activeTab === tab.id
                ? 'bg-blue-600 text-white'
                : 'bg-white text-gray-600 hover:bg-gray-50'
            }`}
          >
            {tab.name}
          </button>
        ))}
      </div>

      {renderContent()}
      {renderEditForm()}
    </div>
  );
};

export default ContentManagement;